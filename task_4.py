# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Ä–∞–º—ñ–¥–∏

# –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ –≤–∏–∫–æ–Ω—É—î –ø–æ–±—É–¥–æ–≤—É –±—ñ–Ω–∞—Ä–Ω–∏—Ö –¥–µ—Ä–µ–≤. –í–∏–∫–æ–Ω–∞–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–¥—É, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —è–∫ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î.
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —è–∫ –±–∞–∑—É —Ü–µ–π –∫–æ–¥, –ø–æ–±—É–¥—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –±—É–¥–µ –≤—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±—ñ–Ω–∞—Ä–Ω—É –∫—É–ø—É.
# üëâüèª –ü—Ä–∏–º—ñ—Ç–∫–∞. –°—É—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ–ª—è–≥–∞—î —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–µ—Ä–µ–≤–∞ —ñ–∑ –∫—É–ø–∏.
# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–∑—É–∞–ª—ñ–∑—É—î –±—ñ–Ω–∞—Ä–Ω—É –∫—É–ø—É.


# —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î –±—ñ–Ω–∞—Ä–Ω—É –∫—É–ø—É —è–∫ –¥–µ—Ä–µ–≤–∞.

import uuid
import heapq
import networkx as nx
import matplotlib.pyplot as plt


# –í—É–∑–æ–ª —ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ 

class Node:
    def __init__(self, key, color="skyblue"):
        self.left = None
        self.right = None
        self.val = key
        self.color = color                 # –∫–æ–ª—ñ—Ä –≤—É–∑–ª–∞ –Ω–∞ –º–∞–ª—é–Ω–∫—É
        self.id = str(uuid.uuid4())        # —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—É–∑–ª–∞


def add_edges(graph, node, pos, x=0.0, y=0.0, layer=1):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–¥–∞—î –≤—É–∑–ª–∏/—Ä–µ–±—Ä–∞ —É –≥—Ä–∞—Ñ NetworkX —ñ —Ä–∞—Ö—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó.
    """
    if node is None:
        return graph

    graph.add_node(node.id, color=node.color, label=node.val)

    # –ª—ñ–≤–∞ –¥–∏—Ç–∏–Ω–∞
    if node.left:
        graph.add_edge(node.id, node.left.id)
        lx = x - 1 / (2 ** layer)
        pos[node.left.id] = (lx, y - 1)
        add_edges(graph, node.left, pos, x=lx, y=y - 1, layer=layer + 1)

    # –ø—Ä–∞–≤–∞ –¥–∏—Ç–∏–Ω–∞
    if node.right:
        graph.add_edge(node.id, node.right.id)
        rx = x + 1 / (2 ** layer)
        pos[node.right.id] = (rx, y - 1)
        add_edges(graph, node.right, pos, x=rx, y=y - 1, layer=layer + 1)

    return graph


def draw_tree(tree_root, title="Binary Tree"):
    """
    –ú–∞–ª—é—î –¥–µ—Ä–µ–≤–æ –∑ –∫–æ—Ä–µ–Ω–µ–º tree_root –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é NetworkX + Matplotlib.
    """
    tree = nx.DiGraph()
    pos = {tree_root.id: (0, 0)}
    add_edges(tree, tree_root, pos)

    colors = [data["color"] for _, data in tree.nodes(data=True)]
    labels = {n: data["label"] for n, data in tree.nodes(data=True)}

    plt.figure(figsize=(9, 6))
    nx.draw(tree, pos=pos, labels=labels, arrows=False,
            node_size=2500, node_color=colors, font_size=12)
    plt.title(title)
    plt.axis("off")
    plt.tight_layout()
    plt.show()


# –ü–æ–±—É–¥–æ–≤–∞ –î–ï–†–ï–í–ê –∑ –º–∞—Å–∏–≤—É-–∫—É–ø–∏

def heap_list_to_tree(heap_list, node_colors=None):
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –º–∞—Å–∏–≤-–ø–æ–¥–∞–Ω–Ω—è –∫—É–ø–∏ (array heap) –Ω–∞ –¥–µ—Ä–µ–≤–æ –∑ –æ–±'—î–∫—Ç—ñ–≤ Node.

    :param heap_list: —Å–ø–∏—Å–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –∫—É–ø–∏ (—ñ–Ω–¥–µ–∫—Å–∏: i -> left 2i+1, right 2i+2)
    :param node_colors: —Å–ø–∏—Å–æ–∫/—Å–ª–æ–≤–Ω–∏–∫ –∫–æ–ª—å–æ—Ä—ñ–≤ –≤—É–∑–ª—ñ–≤ (–æ–ø—Ü—ñ–π–Ω–æ)
    :return: –∫–æ—Ä—ñ–Ω—å –¥–µ—Ä–µ–≤–∞ (Node)
    """
    if not heap_list:
        raise ValueError("–ü–æ—Ä–æ–∂–Ω—è –∫—É–ø–∞ ‚Äì –Ω—ñ—á–æ–≥–æ –≤—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏.")

    # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤
    nodes = []
    for i, val in enumerate(heap_list):
        color = "skyblue"
        if node_colors is not None:
            if isinstance(node_colors, dict):
                color = node_colors.get(i, color)
            elif isinstance(node_colors, (list, tuple)) and i < len(node_colors):
                color = node_colors[i]
        nodes.append(Node(val, color=color))

    # –∑‚Äô—î–¥–Ω—É—î –±–∞—Ç—å–∫—ñ–≤ –∑ –¥—ñ—Ç—å–º–∏ (—ñ–Ω–¥–µ–∫—Å–∏ –∫—É–ø–∏)
    n = len(nodes)
    for i in range(n):
        li = 2 * i + 1
        ri = 2 * i + 2
        if li < n:
            nodes[i].left = nodes[li]
        if ri < n:
            nodes[i].right = nodes[ri]

    return nodes[0]  # –∫–æ—Ä—ñ–Ω—å ‚Äî –µ–ª–µ–º–µ–Ω—Ç –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0


# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫—É–ø–∏

def draw_heap(iterable, as_max=False, title=None, node_colors=None):
    """
    –ë—É–¥—É—î –∫—É–ø—É –∑ iterable –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é heapq —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î —ó—ó —è–∫ –¥–µ—Ä–µ–≤–æ.

    :param iterable: –±—É–¥—å-—è–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å
    :param as_max: False -> –º—ñ–Ω-–∫—É–ø–∞ (heapq –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º),
              True  -> –º–∞–∫—Å-–∫—É–ø–∞ (—Ä–µ–∞–ª—ñ–∑—É—é —á–µ—Ä–µ–∑ —ñ–Ω–≤–µ—Ä—Å—ñ—é –∑–Ω–∞–∫—É)
    :param title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ—ñ–∫–∞
    :param node_colors: –∫–∞—Å—Ç–æ–º–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –≤—É–∑–ª—ñ–≤ (—Å–ø–∏—Å–æ–∫/—Å–ª–æ–≤–Ω–∏–∫ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏)
    """
    data = list(iterable)

    # heapq –Ω–∞–¥–∞—î –º—ñ–Ω-–∫—É–ø—É. –î–ª—è –º–∞–∫—Å-–∫—É–ø–∏ —ñ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–Ω–∞–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
    if as_max:
        tmp = [-x for x in data]
        heapq.heapify(tmp)
        heap_list = [-x for x in tmp]  # –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞–∫, –∞–ª–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤ ‚Äì –≤–∞–ª—ñ–¥–Ω–∞ –∫—É–ø–∞
        default_title = "Max-Heap (via sign inversion)"
    else:
        heap_list = data[:]
        heapq.heapify(heap_list)
        default_title = "Min-Heap"

    root = heap_list_to_tree(heap_list, node_colors=node_colors)
    draw_tree(root, title=title or default_title)


#  DEMO 
if __name__ == "__main__":
    # –ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö
    values = [7, 12, 3, 18, 1, 9, 15, 2]

    # –ú—ñ–Ω-–∫—É–ø–∞
    draw_heap(values, as_max=False, title="–ú—ñ–Ω-–∫—É–ø–∞")

    # –ú–∞–∫—Å-–∫—É–ø–∞
    draw_heap(values, as_max=True, title="–ú–∞–∫—Å-–∫—É–ø–∞")


# heapq.heapify –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ –Ω–∞ –º—ñ–Ω-–∫—É–ø—É –Ω–∞ –º—ñ—Å—Ü—ñ.
# draw_heap –∑–±–∏—Ä–∞—î –º–∞—Å–∏–≤-–∫—É–ø—É, –¥–∞–ª—ñ heap_list_to_tree –∑‚Äô—î–¥–Ω—É—î –≤—É–∑–ª–∏ –∑–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ i -> 2i+1, 2i+2, —ñ –≤—Ä–µ—à—Ç—ñ draw_tree –º–∞–ª—é—î –¥–µ—Ä–µ–≤–æ.
# –ü—Ä–∞–ø–æ—Ä as_max=True —Ä–æ–±–∏—Ç—å –º–∞–∫—Å-–∫—É–ø—É —á–µ—Ä–µ–∑ —ñ–Ω–≤–µ—Ä—Å—ñ—é –∑–Ω–∞–∫—ñ–≤ (–∫–ª–∞—Å–∏—á–Ω–∏–π —Ç—Ä—é–∫ –¥–ª—è heapq).